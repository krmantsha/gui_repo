.. highlight:: rst

.. _scqcv:

#####
scqcv
#####

**Quality control view.**


Description
===========

scqcv provides both, a brief overview of the seismometer network status and a
detailed view of specific stream parameters. Quality Control (QC) parameters,
determined by :ref:`scqc` and sent via messaging system, are received and displayed.

scqcv allows to interactively disable or to enable streams for automatic data processing
based on the observed QC reports.


Detailed QC reports per station
===============================

:ref:`fig-tab-view` shows the tabular view of the QC report messages.
Each QC parameter is shown in a column. The default sorting by stream code can
be changed by pressing a header field of a parameter. A widget displaying the
currently received waveform data is shown by pressing the cell with the streamID.
Positioning the mouse over the parameter cell a ToolTip indicates
more detailed information on the selected parameter. Typing a regular
expression in the "StreamIDFilter" text entry field results in a stream code
filter, only displaying the matching stream codes with QC parameter. Green
colored fields indicate that the QC parameter values lie within the configured
"good" interval. Red colors indicate that the QC parameters lie outside the
tolerated value interval -- this stream might have an issue. All :ref:`colors are
configurable <scqcv-sec-setup>`.
Click on the table header to sort by the selected value or drag the columns to
another position. The order of the columns is controlled by :confval:`parameter`.
By clicking on a streamID, the past waveforms are displayed at length configured
by :confval:`streamWidget.length`.

To **disable / enable** a station click on the respective station field in the
*enabled* column.

.. _fig-tab-view:

.. figure:: media/scqcv/Tabulator_view_of_scqcv.png
   :width: 16cm
   :align: center

   Tabulator view of scqcv


Station overview
================

:ref:`fig-status-overview` shows the status overview grouped by network code.
The status is color coded and the color is derived from a
:ref:`score <scqcv-sec-scoring>` per station.

The more the color usually varies from green to dark red, the worse the waveform data might be.
A dark red color indicates a stream with low quality, e.g. high latency.
Light to darker red
represents a badness sum of related QC parameters. Colors are subject to
changes in near future and are configurable. Pressing a stream code item opens a
single line table
with detailed information of the selected stream. Again it is possible to open
a real time waveform widget by pressing the leading header field indicating
the stream code.

Typing a regular expression in the bottom text entry field
results in a stream code filter, only displaying the matching stream codes.
Disabled stations are crossed out. Click on a stream field to view the detailed
QC parameters where stations can also be enabled / disabled.

.. _fig-status-overview:

.. figure:: media/scqcv/Status_overview_of_scqcv.png
   :width: 16cm
   :align: center

   Status overview of scqcv with a stream widget

The compact status overview allows a quick impression of the present status of
all received streams (:ref:`fig-compact-status`). Functionality is equal to the
status overview grouped by network.

Switch between compact view and
network seperated view by clicking the checkbox in the bottom line.

.. _fig-compact-status:

.. figure:: media/scqcv/Compact_status_overview_of_scqcv.png
   :width: 16cm
   :align: center

   Compact status overview of scqcv


.. _scqcv-sec-scoring:

Scoring
-------

The score is formed per station as the sum of the counts for the parameters defined,
e.g., by :confval:`score.default`. The counts are defined per QC parameter by the
`count` parameter of the applicable range, e.g. :confval:`timing.range.$name.count`.


.. _scqcv-sec-setup:

Setup
=====

While some important parameters can be configured using :ref:`scconfig` the configuration
of others is available by examples in the extensive default configuration of scqcv in
*@DEFAULTCONFIGDIR/scqcv.cfg@*

Apply your setup to scqcv.cfg in @SYSTEMCONFIGDIR@ or in @CONFIGDIR@.
If the parameters are not configured, the defaults configuration will be considered.


Message groups and QC parameters
--------------------------------

Select the desired parameters from the list below. "#" disables a parameter.

.. code-block:: sh

   connection.primaryGroup = QC
   connection.subscription = QC, CONFIG

   parameter = 	"latency           : latency",\
   				"delay             : delay",\
   				"timing quality    : timing",\
   				"offset            : offset",\
   				"rms               : rms",\
   				"gaps count        : gap",\
   				"overlaps count    : overlap",\
   				"availability      : availability",\
   				"spikes count      : spike"
   #				"gaps interval     : gapInterval",\
   #				"gaps length       : gapLength",\
   #				"spikes interval   : spikeInterval",\
   #				"spikes amplitude  : spikeAmplitude"
   #				"overlaps interval : overlapInterval",\
   #				"overlaps length   : overlapLength"


Stream selection
----------------

By default all streams configured by the global bindings will be displayed. To limit
the streams or to use a specific list configure :confval:`streams.codes` and
:confval:`streams.cumulative`.

Example configuration or the AM network:

.. code-block:: sh

   # List of channels to display. By default the global configuration is used
   # which can be overwritten with this parameter.
   streams.codes = AM.*.*.*

   # Add new streams from WfQ automatically to the list of stream configured in
   # streams.codes.
   streams.cumulative = false


Properties of QC parameters
---------------------------

Configure intervals, values and format and background colors for QC parameters to
display in :file:`scqcv.cfg`.

In the configuration the QC parameter is referred to by its unique ConfigName. You may
generate structures for each parameter starting with its ConfigName. The structures
contain all configuration parameters. Example for the QC parameter *timing quality*
referred to as *timing*:

.. code-block:: sh

   timing.ranges = sane, inter, bad
   timing.format = int
   timing.expire = 600
   timing.useAbsoluteValue = false

   timing.range.sane = 90.0, 100.0
   timing.range.inter = 50.0, 90.0

   timing.range.bad.count = -100
   timing.range.bad.color = darkred

   timing.range.inter.count = -1
   timing.range.inter.color = yellow

   timing.range.sane.count = 0
   timing.range.sane.color = green


The mapping of parameter names to ConfigName is configurable by
:confval:`parameter` but the default mapping is available in
:file:`@DEFAULTCONFIGDIR@/scqcv.cfg`.

.. csv-table:: Default mapping of parameter names.

   "Parameter name","ConfigName"
   "latency","latency"
   "delay","delay"
   "timing quality","timing"
   "offset","offset"
   "rms","rms"
   "gaps count","gap"
   "overlaps count","overlap"
   "availability","availability"
   "spikes count","spike"
   "gaps interval","gapInterval"
   "gaps length","gapLength"
   "spikes interval","spikeInterval"
   "spikes amplitude","spikeAmplitude"
   "overlaps interval","overlapInterval"
   "overlaps length","overlapLength"



.. _scqcv_configuration:

Configuration
=============

| :file:`etc/defaults/global.cfg`
| :file:`etc/defaults/scqcv.cfg`
| :file:`etc/global.cfg`
| :file:`etc/scqcv.cfg`
| :file:`~/.seiscomp/global.cfg`
| :file:`~/.seiscomp/scqcv.cfg`

scqcv inherits :ref:`global options<global-configuration>`.



.. confval:: parameter

   Type: *list:string*

   List of QC parameters to be displayed in the details table. Read the scqc documentation
   for a list of available QC parameters and the default configuration
   of scqcv \$SEISCOMP_ROOT\/etc\/defaults\/scqcv.cfg for more examples.
   
   Format: \"Parameter name : ConfigName\"
   
   Example: \"delay : delay\",\"spikes count : spike\",\"spikes amplitude : spikeAmplitude\"
   Refer to the parameters by their ConfigName to configure the attributes.


.. confval:: streams.codes

   Type: *list:string*

   The list of channel codes to be displayed. List items may
   contain wildcards and are separated by comma.
   The list is	intersected with all channels configured in inventory.
   
   Examples:
   
   default : display all streams configured by global bindings
   
   default, PF.BON.00.HH? : display default and all HH streams of PF.BON.00


.. confval:: streams.cumulative

   Type: *boolean*

   Add new streams automatically to the streams
   configured in streams.codes when waveform QC parameters are
   provided for these streams.
   Default is ``false``.

.. note::
   **streamWidget.\***
   *Control the stream widget which opens when clicking on a stream*
   *name in the detailed table.*



.. confval:: streamWidget.length

   Type: *int*

   Unit: *s*

   Length of data to be displayed.
   Default is ``600``.

.. note::
   **score.\***
   *Parameters controlling the overall QC score of a station.*
   *The score is computed from the valid count parameter of the*
   *defined ranges.*



.. confval:: score.default.ranges

   Type: *list:string*

   Ranges to be considered for forming the score. Set the
   count parameter om the respective range section for
   controlling the contribution of this range.


.. note::
   **default.\***
   *Default configuration for all QC parameters. The configuration*
   *can be extended to each QC parameter by placing*
   *"default" with the parameter name in scqcv.cfg. Examples for*
   *some QC parameters are given below.*
   **
   *Read the scqc documentation for a list of available QC*
   *parameters and the default configuration of scqcv*
   *$SEISCOMP_ROOT/etc/defaults/scqcv.cfg for more examples.*



.. confval:: default.ranges

   Type: *list:string*

   Names of range profile to be considered.
   The range profiles define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.
   Default is ``bad, sane``.

.. confval:: default.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: default.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: default.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: default.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: default.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **default.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: default.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: default.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: default.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **default.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      default.range.a.value1 = ...
      default.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      default.range.c.value1 = ...


.. confval:: default.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: default.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: default.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **availability.\***
   *Parameters controlling the display of the QC parameter 'availability'*



.. confval:: availability.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: availability.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: availability.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: availability.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: availability.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: availability.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **availability.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: availability.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: availability.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: availability.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **availability.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      availability.range.a.value1 = ...
      availability.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      availability.range.c.value1 = ...


.. confval:: availability.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: availability.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: availability.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **delay.\***
   *Parameters controlling the display of the QC parameter 'delay'*



.. confval:: delay.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: delay.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: delay.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: delay.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: delay.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: delay.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **delay.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: delay.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: delay.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: delay.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **delay.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      delay.range.a.value1 = ...
      delay.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      delay.range.c.value1 = ...


.. confval:: delay.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: delay.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: delay.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **gap.\***
   *Parameters controlling the display of the QC parameter 'gaps count'*



.. confval:: gap.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: gap.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: gap.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: gap.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: gap.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: gap.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **gap.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: gap.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: gap.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: gap.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **gap.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      gap.range.a.value1 = ...
      gap.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      gap.range.c.value1 = ...


.. confval:: gap.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: gap.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: gap.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **gapLength.\***
   *Parameters controlling the display of the QC parameter 'gaps length'*



.. confval:: gapLength.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: gapLength.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: gapLength.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: gapLength.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: gapLength.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: gapLength.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **gapLength.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: gapLength.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: gapLength.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: gapLength.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **gapLength.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      gapLength.range.a.value1 = ...
      gapLength.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      gapLength.range.c.value1 = ...


.. confval:: gapLength.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: gapLength.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: gapLength.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **gapInterval.\***
   *Parameters controlling the display of the QC parameter 'gaps interval'*



.. confval:: gapInterval.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: gapInterval.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: gapInterval.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: gapInterval.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: gapInterval.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: gapInterval.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **gapInterval.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: gapInterval.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: gapInterval.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: gapInterval.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **gapInterval.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      gapInterval.range.a.value1 = ...
      gapInterval.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      gapInterval.range.c.value1 = ...


.. confval:: gapInterval.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: gapInterval.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: gapInterval.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **latency.\***
   *Parameters controlling the display of the QC parameter 'latency'*



.. confval:: latency.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: latency.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: latency.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: latency.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: latency.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: latency.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **latency.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: latency.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: latency.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: latency.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **latency.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      latency.range.a.value1 = ...
      latency.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      latency.range.c.value1 = ...


.. confval:: latency.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: latency.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: latency.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **offset.\***
   *Parameters controlling the display of the QC parameter 'offset'*



.. confval:: offset.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: offset.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.
   
   Displays raw values if unset.


.. confval:: offset.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: offset.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: offset.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: offset.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **offset.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: offset.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: offset.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: offset.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **offset.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      offset.range.a.value1 = ...
      offset.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      offset.range.c.value1 = ...


.. confval:: offset.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: offset.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: offset.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **overlap.\***
   *Parameters controlling the display of the QC parameter 'overlaps count'*



.. confval:: overlap.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: overlap.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: overlap.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: overlap.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: overlap.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: overlap.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **overlap.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: overlap.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: overlap.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: overlap.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **overlap.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      overlap.range.a.value1 = ...
      overlap.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      overlap.range.c.value1 = ...


.. confval:: overlap.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: overlap.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: overlap.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **overlapInterval.\***
   *Parameters controlling the display of the QC parameter 'overlaps interval'*



.. confval:: overlapInterval.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: overlapInterval.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: overlapInterval.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: overlapInterval.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: overlapInterval.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: overlapInterval.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **overlapInterval.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: overlapInterval.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: overlapInterval.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: overlapInterval.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **overlapInterval.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      overlapInterval.range.a.value1 = ...
      overlapInterval.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      overlapInterval.range.c.value1 = ...


.. confval:: overlapInterval.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: overlapInterval.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: overlapInterval.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **overlapLength.\***
   *Parameters controlling the display of the QC parameter 'overlaps length'*



.. confval:: overlapLength.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: overlapLength.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: overlapLength.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: overlapLength.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: overlapLength.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: overlapLength.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **overlapLength.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: overlapLength.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: overlapLength.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: overlapLength.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **overlapLength.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      overlapLength.range.a.value1 = ...
      overlapLength.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      overlapLength.range.c.value1 = ...


.. confval:: overlapLength.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: overlapLength.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: overlapLength.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **rms.\***
   *Parameters controlling the display of the QC parameter 'rms'*



.. confval:: rms.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: rms.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: rms.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: rms.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: rms.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: rms.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **rms.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: rms.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: rms.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: rms.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **rms.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      rms.range.a.value1 = ...
      rms.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      rms.range.c.value1 = ...


.. confval:: rms.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: rms.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: rms.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **spike.\***
   *Parameters controlling the display of the QC parameter 'spikes count'*



.. confval:: spike.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: spike.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: spike.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: spike.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: spike.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: spike.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **spike.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: spike.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: spike.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: spike.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **spike.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      spike.range.a.value1 = ...
      spike.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      spike.range.c.value1 = ...


.. confval:: spike.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: spike.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: spike.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **spikeAmplitude.\***
   *Parameters controlling the display of the QC parameter 'spikes amplitude'*



.. confval:: spikeAmplitude.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: spikeAmplitude.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: spikeAmplitude.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: spikeAmplitude.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: spikeAmplitude.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: spikeAmplitude.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **spikeAmplitude.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: spikeAmplitude.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: spikeAmplitude.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: spikeAmplitude.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **spikeAmplitude.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      spikeAmplitude.range.a.value1 = ...
      spikeAmplitude.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      spikeAmplitude.range.c.value1 = ...


.. confval:: spikeAmplitude.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: spikeAmplitude.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: spikeAmplitude.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **spikeInterval.\***
   *Parameters controlling the display of the QC parameter 'spikes interval'*



.. confval:: spikeInterval.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: spikeInterval.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: spikeInterval.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: spikeInterval.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: spikeInterval.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: spikeInterval.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **spikeInterval.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: spikeInterval.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: spikeInterval.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: spikeInterval.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **spikeInterval.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      spikeInterval.range.a.value1 = ...
      spikeInterval.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      spikeInterval.range.c.value1 = ...


.. confval:: spikeInterval.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: spikeInterval.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: spikeInterval.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **timing.\***
   *Parameters controlling the display of the QC parameter 'timing quality'*



.. confval:: timing.ranges

   Type: *list:string*

   Names of range profile to be considered
   The range profiles s define the background color table
   fields depending on the field value. Add the default
   ranges for which different intervals and the color are
   configured.


.. confval:: timing.format

   Type: *string*

   Values are: int, float, percent, timeSpan
   
   Displays raw values if unset.


.. confval:: timing.expire

   Type: *double*

   Unit: *s*

   Default time in seconds, how long a value is displayed in scqcv
   if no update is received. Setting to 0 means, show value until
   updated.


.. confval:: timing.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: timing.useAbsoluteValue

   Type: *boolean*

   Activate to display absolute values \(modulus\).
   Default is ``false``.

.. confval:: timing.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **timing.range.\***
   *Range parameters overriding parameters from the general*
   *range section below. Unset values or range profiles*
   *undefined here will be inherited from the general range*
   *section.*



.. confval:: timing.range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: timing.range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: timing.range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **timing.range.$name.\***
   $name is a placeholder for the name to be used and needs to be added to :confval:`ranges` to become active.

   .. code-block:: sh

      ranges = a,b
      timing.range.a.value1 = ...
      timing.range.b.value1 = ...
      # c is not active because it has not been added
      # to the list of ranges
      timing.range.c.value1 = ...


.. confval:: timing.range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: timing.range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: timing.range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **range.\***
   *Range parameters defining default values which can be overridden*
   *per QC parameter in the section of this parameter.*
   *More ranges can be added by adjusting scqcv.cfg e.g. in*
   *@SYSTEMCONFIGDIR@/.*



.. confval:: range.sane

   Type: *list:double*

   Value interval for range sane


.. confval:: range.inter

   Type: *list:double*

   Value interval for range inter


.. confval:: range.bad

   Type: *list:double*

   Value interval for range bad


.. note::

   **range.$name.\***
   $name is a placeholder for the name to be used.


.. confval:: range.$name.count

   Type: *double*

   Contribution of this range for computing the score.
   The range must be considered.
   Default is ``0``.

.. confval:: range.$name.color

   Type: *string*

   A color defined by the color definitions below.


.. confval:: range.$name.action

   Type: *string*

   Possible values: enableStream, disableStream


.. note::
   **color.\***
   *Color definitions. More colors can be added by adjusting*
   *scqcv.cfg e.g. in @SYSTEMCONFIGDIR@/.*



.. confval:: color.red

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.yellow

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.green

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.blue

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.grey

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.grey1

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.darkred

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.yellow

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red01

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red02

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red03

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red04

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red05

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red06

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red07

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red08

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red09

   Type: *list:string*

   Color names or R, G, B, alpha values


.. confval:: color.red10

   Type: *list:string*

   Color names or R, G, B, alpha values


.. note::
   **format.\***
   *Format describtions for showing values. The format parameter*
   *is defined seprately for earch parameter but the actual format*
   *can be adjusted here.*



.. confval:: format.float

   Type: *int*

   Number of decimal values shown for parameters of format float.
   Default is ``2``.

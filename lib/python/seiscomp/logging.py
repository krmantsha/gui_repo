# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _logging
else:
    import _logging

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SEISCOMP_COMPONENT = _logging.SEISCOMP_COMPONENT
LL_UNDEFINED = _logging.LL_UNDEFINED
LL_CRITICAL = _logging.LL_CRITICAL
LL_ERROR = _logging.LL_ERROR
LL_WARNING = _logging.LL_WARNING
LL_NOTICE = _logging.LL_NOTICE
LL_INFO = _logging.LL_INFO
LL_DEBUG = _logging.LL_DEBUG
LL_QUANTITY = _logging.LL_QUANTITY

def debug(arg1):
    return _logging.debug(arg1)

def info(arg1):
    return _logging.info(arg1)

def warning(arg1):
    return _logging.warning(arg1)

def error(arg1):
    return _logging.error(arg1)

def notice(arg1):
    return _logging.notice(arg1)

def log(arg1, format):
    return _logging.log(arg1, format)

def getAll():
    return _logging.getAll()

def getGlobalChannel(*args):
    return _logging.getGlobalChannel(*args)

def getComponentChannel(*args):
    return _logging.getComponentChannel(*args)

def getComponentAll(component):
    return _logging.getComponentAll(component)

def getComponentDebugs(component):
    return _logging.getComponentDebugs(component)

def getComponentInfos(component):
    return _logging.getComponentInfos(component)

def getComponentWarnings(component):
    return _logging.getComponentWarnings(component)

def getComponentErrors(component):
    return _logging.getComponentErrors(component)

def getComponentNotices(component):
    return _logging.getComponentNotices(component)

def consoleOutput():
    return _logging.consoleOutput()

def enableConsoleLogging(arg1):
    return _logging.enableConsoleLogging(arg1)

def disableConsoleLogging():
    return _logging.disableConsoleLogging()

def init(argc, argv):
    return _logging.init(argc, argv)
class Output(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _logging.delete_Output

    def subscribe(self, channel):
        return _logging.Output_subscribe(self, channel)

    def unsubscribe(self, channel):
        return _logging.Output_unsubscribe(self, channel)

    def logComponent(self, e):
        return _logging.Output_logComponent(self, e)

    def logContext(self, e):
        return _logging.Output_logContext(self, e)

    def setUTCEnabled(self, e):
        return _logging.Output_setUTCEnabled(self, e)

# Register Output in _logging:
_logging.Output_swigregister(Output)

class FdOutput(Output):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fdOut=2):
        _logging.FdOutput_swiginit(self, _logging.new_FdOutput(fdOut))
    __swig_destroy__ = _logging.delete_FdOutput

# Register FdOutput in _logging:
_logging.FdOutput_swigregister(FdOutput)

class FileOutput(Output):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _logging.FileOutput_swiginit(self, _logging.new_FileOutput(*args))
    __swig_destroy__ = _logging.delete_FileOutput

    def open(self, filename):
        return _logging.FileOutput_open(self, filename)

    def isOpen(self):
        return _logging.FileOutput_isOpen(self)

# Register FileOutput in _logging:
_logging.FileOutput_swigregister(FileOutput)

class FileRotatorOutput(FileOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _logging.FileRotatorOutput_swiginit(self, _logging.new_FileRotatorOutput(*args))

    def open(self, filename):
        return _logging.FileRotatorOutput_open(self, filename)
    __swig_destroy__ = _logging.delete_FileRotatorOutput

# Register FileRotatorOutput in _logging:
_logging.FileRotatorOutput_swigregister(FileRotatorOutput)

class SyslogOutput(Output):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _logging.SyslogOutput_swiginit(self, _logging.new_SyslogOutput(*args))
    __swig_destroy__ = _logging.delete_SyslogOutput

    def facility(self):
        return _logging.SyslogOutput_facility(self)

    def open(self, ident, facility=None):
        return _logging.SyslogOutput_open(self, ident, facility)

    def isOpen(self):
        return _logging.SyslogOutput_isOpen(self)

    def close(self):
        return _logging.SyslogOutput_close(self)

# Register SyslogOutput in _logging:
_logging.SyslogOutput_swigregister(SyslogOutput)




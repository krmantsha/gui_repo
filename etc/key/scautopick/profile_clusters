# Overrides the relative data acquisition time (relative to the triggering
# pick). This adds a margin to the actual processing and is useful to
# initialize the filter (e.g. bandpass). The data is not used at all until
# signalBegin is reached. The data time window start is the minimum of
# noiseBegin and signalBegin.
picker.AIC.noiseBegin = -5

# Overrides the default time (relative to the trigger time) of the begin of the
# signal window used to pick.
picker.AIC.signalBegin = -1

# Overrides the default time (relative to the trigger time) of the begin of the
# signal window used to pick.
picker.AIC.signalEnd = 0.5

# Overrides the default filter which is "raw". The typical filter grammar can
# be used.
picker.AIC.filter = "RMHP(1)>>ITAPER(2)>>BW_HP(3,3)"

# Defines the mininum SNR.
picker.AIC.minSNR = 3

# Start time of the signal processing relative to the triggering P pick. This
# adds a margin to the actual processing and is useful to initialize the filter
# (e.g. STALTA). The data is not used at all for detection until signalBegin is
# reached.
spicker.AIC.noiseBegin = -3

# Start time of the S-phase detector relative to the triggering P pick.
# Delaying the detector ignores P-coda and early signals, e.g. due to P-S phase
# conversions at shallow depths.
spicker.AIC.signalBegin = 0.15

# End time of the S-phase detector relative to the triggering P pick.
spicker.AIC.signalEnd = 5

# Filter applied on the raw horizontal traces to compute the L2 trace. As a
# minimum remove offsets. S-AIC-V, filters the raw vertical trace computing the
# filtered vertical trace.
spicker.AIC.filter = "RMHP(1)>>ITAPER(2)>>BW(3,3,15)"

# The AIC time window stepping in seconds. For every step the window is
# expanded by step and the AIC is computed.
spicker.AIC.step = 0.1

# Mininum SNR as returned from AIC for accepting a detection.
spicker.AIC.minSNR = 3

# Minimum number of hits for a particular pick time when the running AIC is
# computed for accepting a detection.
spicker.AIC.minCnt = 4

# Defines the filter to be used for picking.
detecFilter = "RMHP(10)>>ITAPER(30)>>BW(4,3,15)>>STALTA(0.5,10)"

# The value the filtered waveform must reach to enable a detection again.
trigOff = 2

# The time correction applied to a detected pick.
timeCorr = 0
